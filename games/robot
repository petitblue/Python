# -----------------------------------------------------------------------------
# Name:       robot
# -----------------------------------------------------------------------------

"""
Module to describe and control robot objects in a maze.
"""
import tkinter


class Robot(object):
    """
    Represent a robot in a maze

    Arguments:
    name(str): robot name
    color(str): robot color
    row(int): row number, default to 0
    column(int): column number,default value to 0

    Attribute:
    name(str): robot name
    color(str): robot color
    row(int): row number
    column(int): column number
    battery(int): current battery
    """

    # class variable used by the show method
    unit_size = 60

    # Class variable describing the maze
    # False represents an obstacle, True represents open space
    maze = [[True, True, False, True, True, True, False, True, True, True],
            [True, True, False, True, True, True, False, True, True, True],
            [True, False, True, True, True, True, False, True, True, True],
            [True, True, True, True, True, True, True, True, False, True],
            [True, True, True, True, True, True, True, True, False, True],
            [True, True, True, True, True, True, True, True, True, True],
            [True, False, False, False, False, True, True, True, True, True],
            [True, True, False, True, True, True, True, True, False, True],
            [True, False, True, True, True, True, True, True, False, True],
            [True, True, True, True, True, True, True, True, False, True]]
    # Class variable representing the length of the maze
    maze_size = len(maze)
    # class variable to represent a full charge
    # A robot with a fully charged battery can take up to 20 steps
    full = 20

    def __init__(self,  name, color, row=0, column=0):
        self.name = name
        self.color = color
        self.row = row
        self.column = column
        self.battery = self.full

    def __str__(self):
        return self.name + ' is a ' + self.color + ' robot lost in the maze.'

    def __gt__(self, other):
        """Return true if the object has greater battery than the other """
        result = self.battery > other.battery
        return result

    def recharge(self):
        """
        Recharge the robot to full battery
        Parameter:None
        Return: the updated object(Robot)
        """
        self.battery += self.full-self.battery
        return self

    def one_step_forward(self):
        """
        Move the object one step forward if possible and decrement
        the battery value by 1.
        The object is impossible to move if it hit the boundary of the grid,
        the obstacle, or out of battery
        Parameter: None
        Return: None
        """
        if 0 <= self.row < self.maze_size-1 and self.battery > 0\
                and self.maze[self.row+1][self.column]:
            self.row += 1
            self.battery -= 1
        else:
            return None

    def one_step_back(self):
        """
        Move the object one step back
        Parameter: None
        Return: None
        """
        if 0 < self.row < self.maze_size and self.battery > 0\
                and self.maze[self.row-1][self.column]:
            self.row -= 1
            self.battery -= 1
        else:
            return None

    def one_step_right(self):
        """
        Move the object one step right
        Parameter: None
        Return: None
        """
        if self.column < self.maze_size-1 and self.battery > 0\
                and self.maze[self.row][self.column+1]:
            self.column += 1
            self.battery -= 1
        else:
            return None

    def one_step_left(self):
        """
        Move the object one step left
        Parameter: None
        Return: None
        """
        if 0 < self.column <= self.maze_size and self.battery > 0 \
                and self.maze[self.row][self.column - 1]:
            self.column -= 1
            self.battery -= 1
        else:
            return None

    def forward(self, steps):
        """
        Move the object forward for a number of steps as far as possible
        Parameter: steps(int)
        Return: None
        """
        for i in range(steps):
            try:
                self.one_step_forward()
            except IndexError:
                return None

    def backward(self, steps):
        """
        Move the object backward for several steps
        Parameter: steps(int)
        Return: None
        """
        for i in range(steps):
            try:
                self.one_step_back()
            except IndexError:
                return None

    def right(self, steps):
        """
        Move the object to the right for several steps
        Parameter: steps(int)
        Return: None
        """

        for i in range(steps):
            try:
                self.one_step_right()
            except IndexError:
                return None

    def left(self, steps):
        """
        Move the object to the left for several steps
        Parameter: steps(int)
        Return: None
        """
        for i in range(steps):
            try:
                self.one_step_left()
            except IndexError:
                return None


    def show(self):
        """
        Draw a graphical representation of the robot in the maze.

        The robot's position and color are shown.
        The color is assumed to be one of the colors recognized by tkinter
        (https://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm)
        If the robot's battery is empty, the robot is shown in a
        horizontal position. Otherwise the robot is shown in an upright
        position.
        The obstacles in the maze are shown in red.

        Parameter: None
        Return: None
        """
        root = tkinter.Tk()
        root.title(self.name + ' in the Maze')
        canvas = tkinter.Canvas(root, background='light green',
                                width=self.unit_size * self.maze_size,
                                height=self.unit_size * self.maze_size)
        canvas.grid()

        # draw a representation of the robot in the maze
        if self.battery:
            upper_x = self.column * self.unit_size + self.unit_size / 4
            upper_y = self.row * self.unit_size
            lower_x = upper_x + self.unit_size / 2
            lower_y = upper_y + self.unit_size
            eye_x = lower_x - 3 * self.unit_size / 20
            eye_y = upper_y + self.unit_size / 10

        else: # the robot ran out of battery
            upper_x = self.column * self.unit_size
            upper_y = self.row * self.unit_size + self.unit_size / 2
            lower_x = upper_x + self.unit_size
            lower_y = upper_y + self.unit_size / 2
            eye_x = lower_x - 9 * self.unit_size / 10
            eye_y = lower_y - 3 * self.unit_size / 20

        rectangle = canvas.create_rectangle(upper_x,
                                            upper_y,
                                            lower_x,
                                            lower_y,
                                            fill=self.color)
        # draw the robot's eyes
        canvas.create_oval(upper_x + self.unit_size / 10,
                           upper_y + self.unit_size / 10,
                           upper_x + 3 * self.unit_size / 20,
                           upper_y + 3 * self.unit_size / 20,
                           fill='black')
        canvas.create_oval(eye_x,
                           eye_y,
                           eye_x + self.unit_size / 20,
                           eye_y + self.unit_size / 20,
                           fill='black')
        # draw the obstacles in the maze
        for row in range(self.maze_size):
            for col in range(self.maze_size):
                if not self.maze[row][col]:
                    canvas.create_rectangle(col * self.unit_size,
                                            row * self.unit_size,
                                            (col + 1) * self.unit_size,
                                            (row + 1) * self.unit_size,
                                            fill='red')
        for row in range(self.maze_size):
            canvas.create_line(0,
                               row * self.unit_size,
                               self.maze_size * self.unit_size,
                               row * self.unit_size)
        for col in range(self.maze_size):
            canvas.create_line(col * self.unit_size,
                               0,
                               col * self.unit_size,
                               self.maze_size * self.unit_size)
        root.mainloop()


class UnderwaterRobot(Robot):

    """
    Represent a robot in the maze with a depth
    Arguments:
    name(str): robot name
    color(str): robot color
    row(int): row number
    column(int): column number, default to 0
    depth(int): depth amount, default to 0

    Attribute:
    name(str): robot name
    color(str): robot color
    row(int): row number
    column(int): column number
    battery(int): current battery
    depth(int): depth amount
    """
    def __init__(self, name, color, depth, row=0, column=0):
        self.depth = depth
        super(). __init__(name, color, row, column)

    def __str__(self):
        return self.name + 'is a' + self.color + 'robot diving under water.'

    def dive(self, distance):
        """
        Adds a given distance to the underwater robot's depth
        Parameter: distance(int)
        Return: the updated object
        """
        self.depth += distance
        return self
